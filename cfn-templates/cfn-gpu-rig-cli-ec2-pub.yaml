---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Add Description Here.

# ------------------------------------------


# ==========================================
Metadata: {}
# Metadata:


# ==========================================
# Parameters {}
Parameters:

  # ------------------------------------------
  # --- The Project Name
  ProjectName:
    Description: "Name of this project"
    ConstraintDescription: "Specify name of the project"
    Type: String
    Default: "cfn-gpu-rig-cli"
    MinLength: 3
    MaxLength: 63
    AllowedPattern:
      (?!^(\d{1,3}\.){3}\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\.[a-z0-9])?)*$(?<!\-))

  # ------------------------------------------
  # --- AMI for EC2 instance
  PublicAmiId:
    Description: "Public AMI ID"
    Type: "AWS::EC2::Image::Id"

  # ------------------------------------------
  # --- Public Subnet ID
  PublicSubnetIdA:
    Description: "Public Subnet ID AZ-A"
    Type: "AWS::EC2::Subnet::Id"

  # ------------------------------------------
  # --- Public Security Group Resource ID
  PublicSgResourceId:
    Description: "Public Security Group ID AZ-A"
    Type: "AWS::EC2::SecurityGroup::Id"


# ==========================================
Conditions: {}
# Conditions:


# ==========================================
Resources:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #         PUBLIC EC2 DEFINITION
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  # ------------------------------------------
  # --- Public EC2 Instance
  PublicEC2Instance:
    Type: "AWS::EC2::Instance"
    # .............................
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
    # .............................
    Properties:
      # .............................
      Tags:
        -
          Key: "Name"
          Value: !Sub "${ProjectName}-gaming-pub"
      # .............................
      AvailabilityZone:
        'Fn::Select':
          - '0'
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      # .............................
      DisableApiTermination: false
      IamInstanceProfile: !Sub "${ProjectName}-pub-iam-ec2-${AWS::Region}"
      ImageId: !Ref PublicAmiId
      InstanceType: "t2.micro"
      KeyName: !Sub "aws.dev.ec2.ssh.key.${AWS::Region}"
      Monitoring: false
      # .............................
      BlockDeviceMappings:
        -
          DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: true
            VolumeSize: 8
            VolumeType: "gp2"
            DeleteOnTermination: true
      # .............................
      NetworkInterfaces:
        -
          Description: "Primary Public NIC"
          DeleteOnTermination: true
          DeviceIndex: "0"
          PrivateIpAddress: "10.0.128.10"
          SubnetId: !Ref PublicSubnetIdA
          GroupSet:
            - !Ref PublicSgResourceId
      # .............................
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Update Packages, inc. aws-cfn-bootstrap
            yum update -y
            # Retrive IMDSv2 token - valid 15mins
            export TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 900")
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --configsets Step1 --stack ${AWS::StackId} --resource PublicEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            #/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource PublicEC2Instance --region ${AWS::Region}
    # .............................
    Metadata:
      Comment: "Configuring an EC2 Instance offering Bastion Host and Virtual Private Network services."
      # .............................
      AWS::CloudFormation::Authentication:
        rolebased:
          type: "S3"
          buckets:
            - !Sub "proj-${ProjectName}"
          roleName: !Sub "${ProjectName}-pub-iam-ec2-${AWS::Region}"
      # .............................
      AWS::CloudFormation::Init:
        configSets:
          Step1:
            - configMisc
            - configRepo
            - configYum
            - configHardenSsh
            - configIPtables
            - configLogs
            - configWebServer
        # / / / / / / / / / / / / / / /
        configMisc:
          commands:
            1_dhcpv6:
              command: "sed -i 's/DHCPV6C=yes/DHCPV6C=no/' /etc/sysconfig/network-scripts/ifcfg-eth0"
            2_timePool:
              command: "sed -i 's/^pool/#&/' /etc/chrony.conf"
            3_persistLogs:
              command: "sed -i 's/.*Storage.*/Storage=persistent/' /etc/systemd/journald.conf"
          services:
            sysvinit:
              # .............................
              network:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "1_dhcpv6"
              # .............................
              chronyd:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "2_timePool"
              # .............................
              systemd-journald:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "3_persistLogs"
        # / / / / / / / / / / / / / / /
        configRepo:
          commands:
            1a_epel:
              command: "amazon-linux-extras install epel"
            1b_epel:
              command: 'sed -i "/\[epel\]/a priority=20" /etc/yum.repos.d/epel.repo'
            2a_repo:
              command: "yum-config-manager --disable amzn2extra-docker"
            3a_repo:
              command: "yum update -y"
        # / / / / / / / / / / / / / / /
        configYum:
          packages:
            yum:
              yum-cron: []
          commands:
            1a_yumCron:
              command: "sed -i 's/.*update_cmd.*/update_cmd = security/' /etc/yum/yum-cron.conf"
            1b_yumCron:
              command: "sed -i 's/.*apply_updates.*/apply_updates = yes/' /etc/yum/yum-cron.conf"
          services:
            sysvinit:
              yum-cron:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "1b_yumCron"
        # / / / / / / / / / / / / / / /
        configHardenSsh:
          packages:
            yum:
              fail2ban: []
          sources:
            /tmp:
              !Sub "https://proj-${ProjectName}.s3.${AWS::Region}.amazonaws.com/ssh/cfn-gpu-rig-cli-ec2-harden-ssh.sh.tar.gz"
          files:
            "/etc/fail2ban/jail.local":
              content: |
                [sshd]
                enabled = true
                ignoreip = 127.0.0.1/8
                bantime = 600
                findtime = 600
                maxretry = 3
                mode = aggressive
                banaction = iptables-multiport
              mode: '000644'
              owner: "root"
              group: "root"
          commands:
            HardenF2B:
              cwd: "/etc/fail2ban/jail.d"
              command: "mv 00-firewalld.conf 00-firewalld.disable"
            HardenSsh:
              cwd: "/tmp/ssh"
              command: "./cfn-gpu-rig-cli-ec2-harden-ssh.sh"
          services:
            sysvinit:
              # .............................
              firewalld:
                ensureRunning: "false"
                enabled: "false"
              # .............................
              fail2ban:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/fail2ban/jail.local"
                commands:
                  - "HardenF2B"
              # .............................
              sshd:
                enabled: "true"
                ensureRunning: "true"
                commands:
                  - "HardenSsh"
        # / / / / / / / / / / / / / / /
        configIPtables:
          packages:
            yum:
              iptables-services: []
          files:
            "/etc/sysctl.d/30-dh.iptables.conf":
              content: |
                net.ipv4.ip_forward = 1
                net.ipv6.conf.default.disable_ipv6 = 1
                net.ipv6.conf.all.disable_ipv6 = 1
              mode: '000644'
              owner: root
              group: root
          sources:
            /tmp:
              !Sub "https://proj-${ProjectName}.s3.${AWS::Region}.amazonaws.com/iptables/cfn-gpu-rig-cli-ec2-pub-iptables.sh.tar.gz"
          commands:
            1_kernelParams:
              command: "sysctl -p /etc/sysctl.d/30-dh.iptables.conf"
            2_iptRules:
              cwd: "/tmp/iptables"
              command: "./cfn-gpu-rig-cli-ec2-pub-iptables.sh"
          services:
            sysvinit:
              iptables:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "2_iptRules"
        # / / / / / / / / / / / / / / /
        configLogs:
          packages:
            rpm:
              cloudwatch-agent: "https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm"
          sources:
            /opt/aws/amazon-cloudwatch-agent/etc:
              !Sub "https://proj-${ProjectName}.s3.${AWS::Region}.amazonaws.com/logs/${ProjectName}-amzn-cw-agent.json.tar.gz"
          files:
            # .............................
            "/etc/rsyslog.d/30-iptables.conf":
              content: |
                :msg, startswith, "IPTlog" -/var/log/cfn-gpu-rig-cli-server-iptables.log
                & stop
              mode: '000644'
              owner: "root"
              group: "root"
            # .............................
            "/etc/logrotate.d/cfn-gpu-rig-cli-logs":
              content: |
                /var/log/cfn-gpu-rig-cli-server-*.log
                {
                 notifempty
                 rotate 21
                 maxsize 500k
                 daily
                 maxage 7
                 copytruncate
                 dateext
                 dateformat .%Y%m%d-%H-%s
                 compress
                 nomail
                 sharedscripts
                 postrotate
                   systemctl restart rsyslog.service
                 endscript
                }
              mode: '000644'
              owner: "root"
              group: "root"
            # .............................
            "/etc/cron.d/cfn-gpu-rig-cli-logs-schedule":
              content: |
                */30 * * * * root /sbin/logrotate /etc/logrotate.d/cfn-gpu-rig-cli-logs
              mode: '000644'
              owner: "root"
              group: "root"
          # .............................
          services:
            sysvinit:
              rsyslog:
                ensureRunning: "true"
                enabled: "true"
                files:
                  - "/etc/rsyslog.d/30-iptables.conf"
        # / / / / / / / / / / / / / / /
        # For use: Network LoadBalancer HealthChecks.
        # systemd service is only enabled within the
        # Autoscale Launch Template so as to validate
        # the success/failure of Launch Template
        # UserData script.
        configWebServer:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content: !Sub |
                <h1>Hello from ${AWS::StackId}<h1>
              mode: '000644'
              owner: "root"
              group: "root"
          services:
            sysvinit:
              httpd:
                enabled: "false"
                ensureRunning: "false"


# ==========================================
# Outputs: {}
Outputs:

  # ------------------------------------------
  # --- Public Instance ID
  PubEC2InstanceId:
    Description: "Public Instance ID"
    Value: !Ref PublicEC2Instance
