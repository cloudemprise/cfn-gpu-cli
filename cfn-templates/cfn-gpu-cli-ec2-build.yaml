---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Add Description Here.

# ------------------------------------------


# ==========================================
Metadata: {}
# Metadata:


# ==========================================
# Parameters {}
Parameters:

  # ------------------------------------------
  # --- The Project Name
  ProjectName:
    Description: "The Name given to this Project."
    ConstraintDescription: "Must satisfy S3 constraints."
    Type: String
    Default: "cfn-gpu-cli"
    MinLength: 3
    MaxLength: 11
    AllowedPattern: ^[a-zA-Z0-9.\-_]{1,255}$

  # ------------------------------------------
  # --- AMI for EC2 instance
  BuildAmiId:
    Description: "Public AMI ID"
    Type: "AWS::EC2::Image::Id"

  # ------------------------------------------
  # --- Public Security Group Resource ID
  PublicSgResourceId:
    Description: "Public Security Group"
    Type: "AWS::EC2::SecurityGroup::Id"

  # ------------------------------------------
  # --- Public Subnet ID
  PublicSubnetIdA:
    Description: "Public Subnet ID AZ-A"
    Type: "AWS::EC2::Subnet::Id"

  # ------------------------------------------
  # --- Public Subnet ID
  PublicSubnetIdB:
    Description: "Public Subnet ID AZ-B"
    Type: "AWS::EC2::Subnet::Id"

  # ------------------------------------------
  # --- Public Subnet ID
  PublicSubnetIdC:
    Description: "Public Subnet ID AZ-C"
    Type: "AWS::EC2::Subnet::Id"

# ==========================================
Conditions: {}
# Conditions:


# ==========================================
Resources:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #         PUBLIC EC2 DEFINITION
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  # ------------------------------------------
  # --- Public EC2 Instance
  PublicEC2Instance:
    Type: "AWS::EC2::Instance"
    # .............................
    Properties:
      # .............................
      Tags:
        -
          Key: "Name"
          Value: !Sub "${ProjectName}-pub-build"
      # .............................
      AvailabilityZone: !Select [ "0", !GetAZs ]
      # .............................
      # Encrypt Ebs Here:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Sub "alias/ce/kms/${AWS::Region}"
            #KmsKeyId: !Sub "alias/aws/ebs"
            #VolumeSize: 128
            VolumeSize: 256
            #VolumeSize: 512
            VolumeType: "gp2"
      # .............................
      #InstanceType: "g4dn.xlarge"
      InstanceType: "t2.micro"
      # true | false
      EbsOptimized: false
      # true | false
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: "stop"
      Monitoring: false
      # .............................
      IamInstanceProfile: !Sub "${ProjectName}-ec2-pub-${AWS::Region}"
      ImageId: !Ref BuildAmiId
      KeyName: !Sub "aws.dev.ec2.win.ssh.key.${AWS::Region}"
      # .............................
      NetworkInterfaces:
        -
          Description: "Primary Public NIC"
          DeleteOnTermination: true
          DeviceIndex: "0"
          PrivateIpAddress: "10.0.128.10"
          SubnetId: !Ref PublicSubnetIdA
          GroupSet:
            - !Ref PublicSgResourceId
      # .............................
      UserData:
        Fn::Base64: !Sub |
          version: 1.0
          tasks:
          - task: executeScript
            inputs:
            - frequency: once
              type: powershell
              runAs: admin
              content: |-
                # Install Hardened Firefox Profile
                $NameOfProjBucket = "proj-${ProjectName}-${AWS::Region}"
                $BucketLocalPath = "C:\$NameOfProjBucket"
                $PrefixFirefox = "firefox"
                Start-Process -FilePath "C:\Program Files\Mozilla Firefox\firefox.exe" -Wait -ArgumentList "/CreateProfile v78-Restricted" -Verb RunAs
                $ProfilePathFirefox = "C:\Users\Administrator\AppData\Roaming\Mozilla\Firefox\Profiles"
                # Ensure CreateProfile has completed before moving on
                while (-not (Test-Path -Path $ProfilePathFirefox)) {Start-Sleep -Seconds 5;New-Item -Path $BucketLocalPath -Name "testfile.txt" -ItemType "file" -Value "This is a timestamp."}
                $ProfileNamePathFirefox = Get-Item "$ProfilePathFirefox\*.v78-Restricted"
                $ArchivePathFirefox = Join-Path $BucketLocalPath $PrefixFirefox
                $ArchiveNamePathFirefox = Get-Item "$ArchivePathFirefox\firefox-profile*.zip"
                Expand-Archive -LiteralPath $ArchiveNamePathFirefox -DestinationPath $ProfileNamePathFirefox -Force
                # Enable DCV UDP Protocol
                New-ItemProperty -Path "Registry::HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\connectivity" -Name "enable-quic-frontend" -PropertyType "DWord" -Value "1"
                Stop-Service -Name "dcvserver" -Force
                (Get-Service dcvserver).WaitForStatus('Stopped')
                Restart-Service -Name "dcvserver" -Force
                (Get-Service dcvserver).WaitForStatus('Running')
                # Wait Instance Status ok (IMDSv1)
                $instanceId = Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/instance-id
                while ((Get-EC2InstanceStatus -InstanceId $instanceId).Status.Status.Value -ne "ok") {Start-Sleep -Seconds 5}
                # Force Shutdown for Image Creation
                Stop-Computer -ComputerName localhost -Force


# ==========================================
# Outputs: {}
Outputs:

  # ------------------------------------------
  # --- Public Instance ID
  PubEC2InstanceId:
    Description: "Public Build Instance ID"
    Value: !Ref PublicEC2Instance
