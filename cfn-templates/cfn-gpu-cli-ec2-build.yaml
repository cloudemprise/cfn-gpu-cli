---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Add Description Here.

# ------------------------------------------


# ==========================================
Metadata: {}
# Metadata:


# ==========================================
# Parameters {}
Parameters:

  # ------------------------------------------
  # --- The Project Name
  ProjectName:
    Description: "The Name given to this Project."
    ConstraintDescription: "Must satisfy S3 constraints."
    Type: String
    Default: "cfn-gpu-cli"
    MinLength: 3
    MaxLength: 11
    AllowedPattern: ^[a-zA-Z0-9.\-_]{1,255}$

  # ------------------------------------------
  # --- AMI for EC2 instance
  BuildAmiId:
    Description: "Public AMI ID"
    Type: "AWS::EC2::Image::Id"

  # ------------------------------------------
  # --- Public Security Group Resource ID
  PublicSgResourceId:
    Description: "Public Security Group"
    Type: "AWS::EC2::SecurityGroup::Id"

  # ------------------------------------------
  # --- Public Subnet ID
  PublicSubnetIdA:
    Description: "Public Subnet ID AZ-A"
    Type: "AWS::EC2::Subnet::Id"

  # ------------------------------------------
  # --- Public Subnet ID
  PublicSubnetIdB:
    Description: "Public Subnet ID AZ-B"
    Type: "AWS::EC2::Subnet::Id"

  # ------------------------------------------
  # --- Public Subnet ID
  PublicSubnetIdC:
    Description: "Public Subnet ID AZ-C"
    Type: "AWS::EC2::Subnet::Id"

# ==========================================
Conditions: {}
# Conditions:


# ==========================================
Resources:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #         PUBLIC EC2 DEFINITION
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  # ------------------------------------------
  # --- Public EC2 Instance
  PublicEC2Instance:
    Type: "AWS::EC2::Instance"
    # .............................
    Properties:
      # .............................
      Tags:
        -
          Key: "Name"
          Value: !Sub "${ProjectName}-pub-build"
      # .............................
      AvailabilityZone: !Select [ "0", !GetAZs ]
      # .............................
      # Encrypt Ebs Here:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            #KmsKeyId: !Sub "alias/ce/kms/${AWS::Region}"
            KmsKeyId: "alias/aws/ebs"
            #VolumeSize: 32
            ##VolumeSize: 64
            VolumeSize: 128
            #VolumeSize: 256
            #VolumeSize: 512
            VolumeType: "gp2"
      # .............................
      InstanceType: "g4dn.xlarge"
      #InstanceType: "t2.micro"
      # true | false
      EbsOptimized: false
      # true | false
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: "stop"
      Monitoring: true
      # .............................
      IamInstanceProfile: !Sub "${ProjectName}-ec2-pub-${AWS::Region}"
      ImageId: !Ref BuildAmiId
      KeyName: !Sub "aws.dev.ec2.win.ssh.key.${AWS::Region}"
      # .............................
      NetworkInterfaces:
        -
          Description: "Primary Public NIC"
          DeleteOnTermination: true
          DeviceIndex: "0"
          PrivateIpAddress: "10.0.128.10"
          SubnetId: !Ref PublicSubnetIdA
          GroupSet:
            - !Ref PublicSgResourceId
      # .............................
      UserData:
        Fn::Base64: !Sub |
          version: 1.0
          tasks:
          - task: executeScript
            inputs:
            - frequency: once
              type: powershell
              runAs: admin
              content: |-
                # Determine UserData process verbs
                $startExe = New-Object System.Diagnostics.ProcessStartInfo -Args PowerShell.exe
                $startExe.verbs | Out-File "C:\powershell-verbs.txt"
                # Install Firefox
                # ----------------------------------------------------------------------------------
                Start-Process msiexec.exe -Wait -ArgumentList '/i "https://download-installer.cdn.mozilla.net/pub/firefox/releases/78.15.0esr/win64/en-GB/Firefox Setup 78.15.0esr.msi" INSTALL_MAINTENANCE_SERVICE=false /passive'
                # Remove Unwanted Extensions
                Remove-Item -Path "C:\Program Files\Mozilla Firefox\browser\features\*.xpi" -Force
                # Disable Firefox Auto Updates
                # ----------------------------------------------------------------------------------
                $RegistryPath = "HKLM:\SOFTWARE\Policies\Mozilla\Firefox"
                $Name         = "DisableAppUpdate"
                $Value        = "1"
                # ---
                If (-NOT (Test-Path $RegistryPath)) {
                  New-Item -Path $RegistryPath -Force | Out-Null
                }
                New-ItemProperty -Path $RegistryPath -Name $Name -Value $Value -PropertyType DWORD -Force
                # Download Firefox Hardened Profile Aritifacts
                # ----------------------------------------------------------------------------------
                $NameOfProjBucket = "proj-${ProjectName}-${AWS::Region}"
                $BucketLocalPath = "C:\$NameOfProjBucket"
                $PrefixFirefox    = "firefox"
                $ObjectsFirefox   = Get-S3Object -BucketName $NameOfProjBucket -KeyPrefix $PrefixFirefox
                # ---
                foreach ($Object in $ObjectsFirefox) {
                  $LocalFileName = $Object.Key
                  if ($LocalFileName -ne '' -and $Object.Size -ne 0) {
                    $LocalFilePath = Join-Path $BucketLocalPath $LocalFileName
                    Copy-S3Object -BucketName $NameOfProjBucket -Key $Object.Key -LocalFile $LocalFilePath
                  }
                }
                # Download NVidia Driver
                # ----------------------------------------------------------------------------------
                $NvidiaBucket    = "nvidia-gaming"
                $NvidiaLocalPath = "C:\$NameOfProjBucket\nvidia"
                $PrefixNvidia    = "windows/latest"
                $ObjectsNvidia   = Get-S3Object -BucketName $NvidiaBucket -KeyPrefix $PrefixNvidia
                # ---
                foreach ($Object in $ObjectsNvidia) {
                  $LocalFileName = $Object.Key
                  if ($LocalFileName -ne '' -and $Object.Size -ne 0) {
                    $LocalFilePath = Join-Path $NvidiaLocalPath $LocalFileName
                    Copy-S3Object -BucketName $NvidiaBucket -Key $Object.Key -LocalFile $LocalFilePath
                  }
                }
                # Install NVidia Driver
                # ----------------------------------------------------------------------------------
                # > zip file : construct location
                $ZipFileLocation = Join-Path $NvidiaLocalPath $PrefixNvidia
                # > zip file : construct filename, including extention
                $ZipFileName = Get-ChildItem -Path $ZipFileLocation -Name -Include "*.zip"
                # > zip file : full name
                $ZipFileNameFull = Join-Path $ZipFileLocation $ZipFileName
                # > zip file : base name
                $ZipFileNameBase = (Get-Item $ZipFileNameFull).Basename
                # > zip file : change to file location
                Set-Location $ZipFileLocation
                # > zip file : extract archive
                Expand-Archive -Path $ZipFileNameFull
                # > change to executable file location
                $UnzipFileLocation = Join-Path $ZipFileLocation "$ZipFileNameBase\Windows"
                Set-Location -Path "$UnzipFileLocation"
                # > filter for specific driver
                $ExeFileName = Get-ChildItem -Path $UnzipFileLocation -Name -Include "*server2019*.exe"
                # > execute driver file in silent mode
                $ExeFileNameFull = Join-Path $UnzipFileLocation $ExeFileName
                Start-Process -NoNewWindow -Wait -FilePath $ExeFileNameFull -ArgumentList '/s'
                # Install NVidia License
                # ----------------------------------------------------------------------------------
                $RegistryPath = "HKLM:\SOFTWARE\NVIDIA Corporation\Global"
                $Name         = "vGamingMarketplace"
                $Value        = "2"
                # ---
                If (-NOT (Test-Path $RegistryPath)) {
                  New-Item -Path $RegistryPath -Force | Out-Null
                }
                New-ItemProperty -Path $RegistryPath -Name $Name -Value $Value -PropertyType "DWORD" -Force
                #---
                Invoke-WebRequest -Uri "https://nvidia-gaming.s3.amazonaws.com/GridSwCert-Archive/GridSwCertWindows_2021_10_2.cert" -OutFile "$Env:PUBLIC\Documents\GridSwCert.txt"
                # Wait Instance Status ok (IMDSv1)
                # ----------------------------------------------------------------------------------
                $instanceId = Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/instance-id
                while ((Get-EC2InstanceStatus -InstanceId $instanceId).Status.Status.Value -ne "ok") {
                  Start-Sleep -Seconds 5
                }
                # Force Shutdown for Image Creation
                Stop-Computer -ComputerName localhost -Force


# ==========================================
# Outputs: {}
Outputs:

  # ------------------------------------------
  # --- Public Instance ID
  PubEC2InstanceId:
    Description: "Public Build Instance ID"
    Value: !Ref PublicEC2Instance
