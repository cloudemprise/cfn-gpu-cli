---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  An AWS virtual server offering Public Key Infrastructure Certification
  Authority services.

  An EC2 Instance is declared with an associated CreationPolicy attribute for OS
  configuration activities.

  cfn-init helper script authenticated by a least-privileged IAM role identity
  grant containing customer managed inline policies.

  The private key of the Cetification Authority is encrypted with a passphrase
  pulled down from AWS Systems Manager Parameter Store.

  Notable segments of the metadata configuration tasks include:
    1) Persistent syslog reporting on all important system and application
      services.
    2) Configure repository priorities and automatic OS security patching.
    3) Hardening of the ssh service.
    4) Harden local network interfaces and configure a restrictive and
      redundant statefull firewall, i.e. iptables.
    5) Setup and configure a Public Key Infrastructure for Certification
      Authority services.

# ------------------------------------------


# ==========================================
Metadata: {}
# Metadata:


# ==========================================
# Parameters {}
Parameters:

  # ------------------------------------------
  # --- The Project Name
  ProjectName:
    Description: "Name of this Openvpn project"
    ConstraintDescription: "Specify name of the project"
    Type: String
    Default: "cfn-gpu-rig-cli"
    MinLength: 3
    MaxLength: 63
    AllowedPattern:
      (?!^(\d{1,3}\.){3}\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\.[a-z0-9])?)*$(?<!\-))

  # ------------------------------------------
  # --- AMI for EC2 instance
  PrivateAmiId:
    Description: "Private AMI ID"
    Type: "AWS::EC2::Image::Id"

  # ------------------------------------------
  # --- Private Subnet ID
  PrivateSubnetIdA:
    Description: "Private Subnet ID AZ-A"
    Type: "AWS::EC2::Subnet::Id"

  # ------------------------------------------
  # --- Private Security Group Resource ID
  PrivateSgResourceId:
    Description: "Private Security Group ID AZ-A"
    Type: "AWS::EC2::SecurityGroup::Id"


# ==========================================
Conditions: {}
# Conditions:


# ==========================================
Resources:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #         PRIVATE EC2 DEFINITION
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  # ------------------------------------------
  # --- Private EC2 Instance
  PrivateEC2Instance:
    Type: "AWS::EC2::Instance"
    # .............................
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
    # .............................
    Properties:
      # .............................
      Tags:
        -
          Key: "Name"
          Value: !Sub "${ProjectName}-ovpn-priv"
      # .............................
      AvailabilityZone:
        'Fn::Select':
          - '0'
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      # .............................
      DisableApiTermination: false
      IamInstanceProfile: !Sub "${ProjectName}-priv-iam-ec2-${AWS::Region}"
      ImageId: !Ref PrivateAmiId
      InstanceType: "t2.micro"
      KeyName: !Sub "aws.dev.ec2.ssh.key.${AWS::Region}"
      Monitoring: false
      # .............................
      BlockDeviceMappings:
        -
          DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: true
            VolumeSize: 8
            VolumeType: "gp2"
            DeleteOnTermination: true
      # .............................
      NetworkInterfaces:
        -
          Description: "Primary Private NIC"
          DeleteOnTermination: true
          DeviceIndex: "0"
          PrivateIpAddress: "10.0.0.10"
          SubnetId: !Ref PrivateSubnetIdA
          GroupSet:
            - !Ref PrivateSgResourceId
      # .............................
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Update Packages, inc. aws-cfn-bootstrap
            yum update -y
            # Retrive IMDSv2 token - valid 15mins
            export TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 900")
            # Fix openssl error (easy-rsa) : random seed file
            export RANDFILE=/tmp/.rnd
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --configsets Step1 --stack ${AWS::StackId} --resource PrivateEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            #/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource PrivateEC2Instance --region ${AWS::Region}
    # .............................
    Metadata:
      Comment: "Configuring an EC2 Instance offering Public Key Infrastructure Certification Authority services."
      # .............................
      AWS::CloudFormation::Authentication:
        rolebased:
          type: "S3"
          buckets:
            - !Sub "proj-${ProjectName}"
          roleName: !Sub "${ProjectName}-priv-iam-ec2-${AWS::Region}"
      # .............................
      AWS::CloudFormation::Init:
        configSets:
          Step1:
            - configMisc
            - configRepo
            - configYum
            - configHardenSsh
            - configIPtables
            - configLogs
            - configEasyRSA
            - configOpenvpn
        # / / / / / / / / / / / / / / /
        configMisc:
          commands:
            1_dhcpv6:
              command: "sed -i 's/DHCPV6C=yes/DHCPV6C=no/' /etc/sysconfig/network-scripts/ifcfg-eth0"
            2_timePool:
              command: "sed -i 's/^pool/#&/' /etc/chrony.conf"
            3_persistLogs:
              command: "sed -i 's/.*Storage.*/Storage=persistent/' /etc/systemd/journald.conf"
          services:
            sysvinit:
              # .............................
              network:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "1_dhcpv6"
              # .............................
              chronyd:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "2_timePool"
              # .............................
              systemd-journald:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "3_persistLogs"
        # / / / / / / / / / / / / / / /
        configRepo:
          commands:
            1a_epel:
              command: "amazon-linux-extras install epel"
            1b_epel:
              command: 'sed -i "/\[epel\]/a priority=20" /etc/yum.repos.d/epel.repo'
            2a_repo:
              command: "yum-config-manager --disable amzn2extra-docker"
            3a_repo:
              command: "yum update -y"
        # / / / / / / / / / / / / / / /
        configYum:
          packages:
            yum:
              yum-cron: []
          commands:
            1a_yumCron:
              command: "sed -i 's/.*update_cmd.*/update_cmd = security/' /etc/yum/yum-cron.conf"
            1b_yumCron:
              command: "sed -i 's/.*apply_updates.*/apply_updates = yes/' /etc/yum/yum-cron.conf"
          services:
            sysvinit:
              yum-cron:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "1b_yumCron"
        # / / / / / / / / / / / / / / /
        configHardenSsh:
          packages:
            yum:
              fail2ban: []
          sources:
            /tmp:
              !Sub "https://proj-${ProjectName}.s3.${AWS::Region}.amazonaws.com/ssh/cfn-gpu-rig-cli-ec2-harden-ssh.sh.tar.gz"
          files:
            "/etc/fail2ban/jail.local":
              content: |
                [sshd]
                enabled = true
                ignoreip = 127.0.0.1/8
                bantime = 600
                findtime = 600
                maxretry = 3
                mode = aggressive
                banaction = iptables-multiport
              mode: '000644'
              owner: "root"
              group: "root"
          commands:
            fail2ban:
              cwd: "/etc/fail2ban/jail.d"
              command: "mv 00-firewalld.conf 00-firewalld.disable"
            HardenSsh:
              cwd: "/tmp/ssh"
              command: "./cfn-gpu-rig-cli-ec2-harden-ssh.sh"
          services:
            sysvinit:
              # .............................
              firewalld:
                ensureRunning: "false"
                enabled: "false"
              # .............................
              fail2ban: 
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/fail2ban/jail.local"
                commands: 
                  - "fail2ban"
              # .............................
              sshd:
                enabled: "true"
                ensureRunning: "true"
                commands:
                  - "HardenSsh"
        # / / / / / / / / / / / / / / /
        configIPtables:
          packages:
            yum:
              iptables-services: []
          sources:
            /tmp:
              !Sub "https://proj-${ProjectName}.s3.${AWS::Region}.amazonaws.com/iptables/cfn-gpu-rig-cli-ec2-priv-iptables.sh.tar.gz"
          commands:
            iptRules:
              cwd: "/tmp/iptables"
              command: "./cfn-gpu-rig-cli-ec2-priv-iptables.sh"
          services:
            sysvinit:
              iptables:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "iptRules"
        # / / / / / / / / / / / / / / /
        configLogs:
          files:
            # .............................
            "/etc/rsyslog.d/30-iptables.conf":
              content: |
                :msg, startswith, "IPTlog" -/var/log/cfn-gpu-rig-cli-server-iptables.log
                & stop
              mode: '000644'
              owner: "root"
              group: "root"
            # .............................
            "/etc/logrotate.d/cfn-gpu-rig-cli-logs":
              content: |
                /var/log/cfn-gpu-rig-cli-server-*.log
                {
                 notifempty
                 rotate 21
                 maxsize 500k
                 daily
                 maxage 7
                 copytruncate
                 dateext
                 dateformat .%Y%m%d-%H-%s
                 compress
                 nomail
                 sharedscripts
                 postrotate
                   systemctl restart rsyslog.service
                 endscript
                }
              mode: '000644'
              owner: "root"
              group: "root"
            # .............................
            "/etc/cron.d/cfn-gpu-rig-cli-logs-schedule":
              content: |
                */30 * * * * root /sbin/logrotate /etc/logrotate.d/cfn-gpu-rig-cli-logs
              mode: '000644'
              owner: "root"
              group: "root"
          # .............................
          services:
            sysvinit:
              rsyslog:
                ensureRunning: "true"
                enabled: "true"
                files:
                  - "/etc/rsyslog.d/30-iptables.conf"
        # / / / / / / / / / / / / / / /
        configEasyRSA:
          packages:
            yum:
              easy-rsa: []
          files:
            "/usr/local/easy-rsa/vars":
              content: |
                set_var EASYRSA_REQ_CN "cfn-gpu-rig-cli-server-cert-auth"
                set_var EASYRSA_BATCH "yes"
                set_var EASYRSA_ALGO ec
                set_var EASYRSA_CURVE secp521r1
                set_var EASYRSA_KEY_SIZE 4096
                set_var EASYRSA_DIGEST "sha512"
              mode: '000644'
              owner: "root"
              group: "root"
          sources:
            /tmp/sign-reqs:
              !Sub "https://proj-${ProjectName}.s3.${AWS::Region}.amazonaws.com/easy-rsa/sign-reqs/cfn-gpu-rig-cli-easyrsa-sign-reqs.tar.gz"
          commands:
            1a_initPKI:
              command: "mkdir -p /usr/local/easy-rsa && cp -r /usr/share/easy-rsa/3/* $_"
            1b_initPKI:
              cwd: "/usr/local/easy-rsa"
              command: "./easyrsa init-pki"
            2a_buildCA:
              cwd: "/usr/local/easy-rsa"
              command: "touch pki-cert-auth.txt && chmod 600 $_"
            2b_buildCA:
              cwd: "/usr/local/easy-rsa"
              command: !Sub 'aws ssm get-parameters --names "/${ProjectName}/pki-cert-auth" --with-decryption --query "Parameters[].Value" --output text > pki-cert-auth.txt; echo $_ >> pki-cert-auth.txt'
            2y_buildCA:
              cwd: "/usr/local/easy-rsa"
              command: "./easyrsa --passin=file:pki-cert-auth.txt --passout=file:pki-cert-auth.txt build-ca"
            2z_buildCA:
              cwd: "/usr/local/easy-rsa/pki"
              command: "cp ca.crt issued/"
            3_importReqs:
              cwd: "/usr/local/easy-rsa"
              command: "for REQUEST in /tmp/sign-reqs/*; do ./easyrsa import-req $REQUEST $(basename $REQUEST .req); done"
            4a_signReqs:
              cwd: "/usr/local/easy-rsa"
              command: "for REQUEST in /usr/local/easy-rsa/pki/reqs/*; do EntityName=$(basename $REQUEST .req); ./easyrsa --passin=file:pki-cert-auth.txt sign-req ${EntityName##*-} $EntityName; done"
            4b_signReqs:
              cwd: "/usr/local/easy-rsa"
              command: "rm -f pki-cert-auth.txt"
            4c_signReqs:
              cwd: "/usr/local/easy-rsa/pki/issued"
              command:
                !Sub "tar -czf - ca.crt *server.crt | aws s3 cp - s3://proj-${ProjectName}/openvpn/server/crt/cfn-gpu-rig-cli-server-crt.tar.gz"
            4d_signReqs:
              cwd: "/usr/local/easy-rsa/pki/issued"
              command:
                !Sub "tar -czf - ca.crt *client.crt | aws s3 cp - s3://proj-${ProjectName}/openvpn/client/crt/cfn-gpu-rig-cli-client-crt.tar.gz"
        # / / / / / / / / / / / / / / /
        configOpenvpn:
          commands:
            1_cmd:
              cwd: "/tmp"
              command: "mkdir openvpn-client-files"
            2_cmd:
              cwd: "/tmp/openvpn-client-files"
              command: "cp /usr/local/easy-rsa/pki/ca.crt ."
            3_cmd:
              cwd: "/tmp/openvpn-client-files"
              command: "cp /usr/local/easy-rsa/pki/issued/*client.crt ."


# ==========================================
# Outputs: {}
Outputs:

  # ------------------------------------------
  # --- Private Instance ID
  PrivEC2InstanceId:
    Description: "PKI Cert Auth Private Instance ID"
    Value: !Ref PrivateEC2Instance
